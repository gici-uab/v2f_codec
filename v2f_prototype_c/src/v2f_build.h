/**
 * @file v2f_build.h
 *
 * @brief Tools to generate coders and decoders.
 */

#ifndef V2F_BUILD_H
#define V2F_BUILD_H

#include <stdint.h>

#include "v2f.h"
#include "v2f_compressor.h"
#include "v2f_decompressor.h"

/**
 * @enum v2f_build_constant_t
 *
 * Constants related to the building of default V2F forests.
 */
typedef enum {
    /**
     * Minimum number of bytes per sample supported by the v2f_build_minimal_forest
     * function.
     */
    V2F_C_MINIMAL_MIN_BYTES_PER_WORD = V2F_C_MIN_BYTES_PER_WORD,
    /**
     * Maximum number of bytes per sample supported by the v2f_build_minimal_forest
     * function.
     */
    V2F_C_MINIMAL_MAX_BYTES_PER_WORD = 2,
} v2f_build_constant_t;

/**
 * Build a minimal compressor/decompressor pair.
 * No quantization nor decorrelation is applied by this pair.
 * The V2F forest is generated by @ref v2f_build_minimal_forest.
 *
 * @param bytes_per_word bytes per word to support
 * @param compressor pointer compressor to initialize
 * @param decompressor pointer decompressor to initialize
 * @return
 */
v2f_error_t v2f_build_minimal_codec(
        uint8_t bytes_per_word,
        v2f_compressor_t* compressor,
        v2f_decompressor_t* decompressor);

/**
 * Free all memory allocated by @ref v2f_build_minimal_codec.
 *
 * @param compressor initialized compressor
 * @param decompressor initialized decompressor
 * @return
 */
v2f_error_t v2f_build_destroy_minimal_codec(
        v2f_compressor_t* compressor,
        v2f_decompressor_t* decompressor);

/**
 * Build a minimal V2F entropy coder/decoder pair
 * with 2^(8*bytes_per_word) entries,
 * designed to cope with samples up to 2^(8*bytes_per_word) - 1.
 *
 * The destroy function should be called to release all employed memory.
 *
 * @param bytes_per_word
 * @param coder pointer to the coder to be built
 * @param decoder pointer to the decoder to be built
 * @return
 *  - @ref V2F_E_NONE : Successfully created
 *  - @ref V2F_E_INVALID_PARAMETER : At least one parameter was invalid
 */
v2f_error_t v2f_build_minimal_forest(uint8_t bytes_per_word,
                                     v2f_entropy_coder_t * coder,
                                     v2f_entropy_decoder_t * decoder);

/**
 * Release all memory allocated by v2f_build_minimal_forest
 *
 * @param coder coder to be destroyed
 * @param decoder pointer to the decoder to be destroyed
 * @return
 *  - @ref V2F_E_NONE : Successfully created
 *  - @ref V2F_E_INVALID_PARAMETER : At least one parameter was invalid
 */
v2f_error_t v2f_build_destroy_minimal_forest(
        v2f_entropy_coder_t *coder, v2f_entropy_decoder_t * decoder);

#endif /* V2F_BUILD_H */
